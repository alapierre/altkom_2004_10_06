<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:lang="http://www.springframework.org/schema/lang"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:batch="http://www.springframework.org/schema/batch" 
       xmlns:task="http://www.springframework.org/schema/task"

       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
          http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
          http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-4.0.xsd
          http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd
          http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch.xsd
          http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
">

    <import resource="classpath:database.xml" />
    
    <task:scheduler id="scheduler" pool-size="10"/>
    
    <task:scheduled-tasks scheduler="scheduler">
        <task:scheduled ref="helloService" method="sendReport" cron="0/10 * * * * *"/>
    </task:scheduled-tasks>
    
    <bean id="helloService" class="pl.altkom.sping.batch.sample.HelloServiceImpl"></bean>
    
    <!-- stored job-meta in database -->
    <bean id="jobRepository"
          class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="transactionManager" ref="transactionManager" />
        <property name="databaseType" value="derby" />
    </bean>
 
    <bean id="jobLauncher"
          class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>
    
    <bean id="report" class="pl.altkom.sping.batch.sample.model.Customer" scope="prototype" />
    
    <bean id="itemProcessor" class="pl.altkom.sping.batch.sample.processor.CustomItemProcessor" />
    
    <batch:job id="importCustomers" >
        <batch:step id="step1" allow-start-if-complete="true">
            <batch:tasklet>
                <batch:chunk reader="cvsFileItemReader" writer="customerItemWriter" 
                             commit-interval="10">
                </batch:chunk>
            </batch:tasklet>
        </batch:step>
    </batch:job>
 
    <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="linesToSkip" value="1"/>
        <property name="encoding" value="UTF-8"/>
        <property name="resource" value="classpath:customers.csv" />
        
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean
                        class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="name,nip,street,town,postalCode" />
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="pl.altkom.sping.batch.sample.mapper.CustomerFieldSetMapper" />
 
                    <!-- if no data type conversion, use BeanWrapperFieldSetMapper to map by name
                   <bean
                           class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
                           <property name="prototypeBeanName" value="report" />
                   </bean>
                    -->
                </property>
            </bean>
        </property>
 
    </bean>
 
    <bean id="customerItemWriter"
          class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="assertUpdates" value="true" />
        <property name="itemSqlParameterSourceProvider">
            <bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
        </property>
        <property name="sql"
             value="INSERT INTO CUSTOMER (NAME, NIP, street, town, postalCode) VALUES(:name, :nip, :address.street, :address.town, :address.postalCode)" />
        <property name="dataSource" ref="dataSource-prod" /> 
    </bean>
    
</beans>
